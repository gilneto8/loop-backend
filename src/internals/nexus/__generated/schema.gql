### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  createdAt: DateTime
  details: String
  email: String
  id: Int
  name: String
  password: String
  trips(after: TripWhereUniqueInput, before: TripWhereUniqueInput, first: Int, last: Int, orderBy: [AccountTripsOrderByInput!], where: AccountTripsWhereInput): [Trip!]!
  updatedAt: DateTime
}

input AccountCreateInput {
  createdAt: DateTime
  details: String
  email: String!
  name: String!
  password: String!
  trips: TripCreateNestedManyWithoutOwnerInput
  updatedAt: DateTime
}

input AccountCreateNestedOneWithoutTripsInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithouttripsInput
  create: AccountCreateWithoutTripsInput
}

input AccountCreateOrConnectWithouttripsInput {
  create: AccountCreateWithoutTripsInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutTripsInput {
  createdAt: DateTime
  details: String
  email: String!
  name: String!
  password: String!
  updatedAt: DateTime
}

input AccountOrderByInput {
  createdAt: SortOrder
  details: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

input AccountTripsOrderByInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  updatedAt: SortOrder
}

input AccountTripsWhereInput {
  createdAt: DateTimeFilter
  name: StringFilter
}

input AccountUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  trips: TripUpdateManyWithoutOwnerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpdateOneWithoutTripsInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithouttripsInput
  create: AccountCreateWithoutTripsInput
  delete: Boolean
  disconnect: Boolean
  update: AccountUpdateWithoutTripsInput
  upsert: AccountUpsertWithoutTripsInput
}

input AccountUpdateWithoutTripsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpsertWithoutTripsInput {
  create: AccountCreateWithoutTripsInput!
  update: AccountUpdateWithoutTripsInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  createdAt: DateTimeFilter
  details: StringNullableFilter
  email: StringFilter
  id: IntFilter
  name: StringFilter
  password: StringFilter
  trips: TripListRelationFilter
  updatedAt: DateTimeFilter
}

input AccountWhereUniqueInput {
  email: String
  id: Int
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumPathTypeFieldUpdateOperationsInput {
  set: PathType
}

input EnumPathTypeFilter {
  equals: PathType
  in: [PathType!]
  not: NestedEnumPathTypeFilter
  notIn: [PathType!]
}

input EnumWaypointTypeFieldUpdateOperationsInput {
  set: WaypointType
}

input EnumWaypointTypeFilter {
  equals: WaypointType
  in: [WaypointType!]
  not: NestedEnumWaypointTypeFilter
  notIn: [WaypointType!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createOneAccount(data: AccountCreateInput!): Account
  createOnePath(data: PathCreateInput!): Path
  createOneTrip(data: TripCreateInput!): Trip
  createOneWaypoint(data: WaypointCreateInput!): Waypoint
  deleteOneAccount(where: AccountWhereUniqueInput!): Account
  deleteOnePath(where: PathWhereUniqueInput!): Path
  deleteOneTrip(where: TripWhereUniqueInput!): Trip
  deleteOneWaypoint(where: WaypointWhereUniqueInput!): Waypoint
  updateOneAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateOnePath(data: PathUpdateInput!, where: PathWhereUniqueInput!): Path
  updateOneTrip(data: TripUpdateInput!, where: TripWhereUniqueInput!): Trip
  updateOneWaypoint(data: WaypointUpdateInput!, where: WaypointWhereUniqueInput!): Waypoint
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumPathTypeFilter {
  equals: PathType
  in: [PathType!]
  not: NestedEnumPathTypeFilter
  notIn: [PathType!]
}

input NestedEnumWaypointTypeFilter {
  equals: WaypointType
  in: [WaypointType!]
  not: NestedEnumWaypointTypeFilter
  notIn: [WaypointType!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableFloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Path {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  from: Waypoint
  fromId: Int
  id: Int
  name: String
  to: Waypoint
  toId: Int
  trip: Trip
  tripId: Int
  type: PathType
  updatedAt: DateTime
}

input PathCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  from: WaypointCreateNestedOneWithoutFromInput
  name: String!
  to: WaypointCreateNestedOneWithoutToInput
  trip: TripCreateNestedOneWithoutPathsInput
  type: PathType
  updatedAt: DateTime
}

input PathCreateNestedManyWithoutFromInput {
  connect: [PathWhereUniqueInput!]
  connectOrCreate: [PathCreateOrConnectWithoutfromInput!]
  create: [PathCreateWithoutFromInput!]
}

input PathCreateNestedManyWithoutToInput {
  connect: [PathWhereUniqueInput!]
  connectOrCreate: [PathCreateOrConnectWithouttoInput!]
  create: [PathCreateWithoutToInput!]
}

input PathCreateNestedManyWithoutTripInput {
  connect: [PathWhereUniqueInput!]
  connectOrCreate: [PathCreateOrConnectWithouttripInput!]
  create: [PathCreateWithoutTripInput!]
}

input PathCreateOrConnectWithoutfromInput {
  create: PathCreateWithoutFromInput!
  where: PathWhereUniqueInput!
}

input PathCreateOrConnectWithouttoInput {
  create: PathCreateWithoutToInput!
  where: PathWhereUniqueInput!
}

input PathCreateOrConnectWithouttripInput {
  create: PathCreateWithoutTripInput!
  where: PathWhereUniqueInput!
}

input PathCreateWithoutFromInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  name: String!
  to: WaypointCreateNestedOneWithoutToInput
  trip: TripCreateNestedOneWithoutPathsInput
  type: PathType
  updatedAt: DateTime
}

input PathCreateWithoutToInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  from: WaypointCreateNestedOneWithoutFromInput
  name: String!
  trip: TripCreateNestedOneWithoutPathsInput
  type: PathType
  updatedAt: DateTime
}

input PathCreateWithoutTripInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  from: WaypointCreateNestedOneWithoutFromInput
  name: String!
  to: WaypointCreateNestedOneWithoutToInput
  type: PathType
  updatedAt: DateTime
}

input PathListRelationFilter {
  every: PathWhereInput
  none: PathWhereInput
  some: PathWhereInput
}

input PathOrderByInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  from: WaypointOrderByInput
  fromId: SortOrder
  id: SortOrder
  name: SortOrder
  to: WaypointOrderByInput
  toId: SortOrder
  trip: TripOrderByInput
  tripId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input PathScalarWhereInput {
  AND: [PathScalarWhereInput!]
  NOT: [PathScalarWhereInput!]
  OR: [PathScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  fromId: IntNullableFilter
  id: IntFilter
  name: StringFilter
  toId: IntNullableFilter
  tripId: IntNullableFilter
  type: EnumPathTypeFilter
  updatedAt: DateTimeFilter
}

enum PathType {
  BOAT
  CAR
  PEDESTRIAN
  PLANE
  TRAIN
}

input PathUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  from: WaypointUpdateOneWithoutFromInput
  name: StringFieldUpdateOperationsInput
  to: WaypointUpdateOneWithoutToInput
  trip: TripUpdateOneWithoutPathsInput
  type: EnumPathTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PathUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumPathTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PathUpdateManyWithWhereWithoutFromInput {
  data: PathUpdateManyMutationInput!
  where: PathScalarWhereInput!
}

input PathUpdateManyWithWhereWithoutToInput {
  data: PathUpdateManyMutationInput!
  where: PathScalarWhereInput!
}

input PathUpdateManyWithWhereWithoutTripInput {
  data: PathUpdateManyMutationInput!
  where: PathScalarWhereInput!
}

input PathUpdateManyWithoutFromInput {
  connect: [PathWhereUniqueInput!]
  connectOrCreate: [PathCreateOrConnectWithoutfromInput!]
  create: [PathCreateWithoutFromInput!]
  delete: [PathWhereUniqueInput!]
  deleteMany: [PathScalarWhereInput!]
  disconnect: [PathWhereUniqueInput!]
  set: [PathWhereUniqueInput!]
  update: [PathUpdateWithWhereUniqueWithoutFromInput!]
  updateMany: [PathUpdateManyWithWhereWithoutFromInput!]
  upsert: [PathUpsertWithWhereUniqueWithoutFromInput!]
}

input PathUpdateManyWithoutToInput {
  connect: [PathWhereUniqueInput!]
  connectOrCreate: [PathCreateOrConnectWithouttoInput!]
  create: [PathCreateWithoutToInput!]
  delete: [PathWhereUniqueInput!]
  deleteMany: [PathScalarWhereInput!]
  disconnect: [PathWhereUniqueInput!]
  set: [PathWhereUniqueInput!]
  update: [PathUpdateWithWhereUniqueWithoutToInput!]
  updateMany: [PathUpdateManyWithWhereWithoutToInput!]
  upsert: [PathUpsertWithWhereUniqueWithoutToInput!]
}

input PathUpdateManyWithoutTripInput {
  connect: [PathWhereUniqueInput!]
  connectOrCreate: [PathCreateOrConnectWithouttripInput!]
  create: [PathCreateWithoutTripInput!]
  delete: [PathWhereUniqueInput!]
  deleteMany: [PathScalarWhereInput!]
  disconnect: [PathWhereUniqueInput!]
  set: [PathWhereUniqueInput!]
  update: [PathUpdateWithWhereUniqueWithoutTripInput!]
  updateMany: [PathUpdateManyWithWhereWithoutTripInput!]
  upsert: [PathUpsertWithWhereUniqueWithoutTripInput!]
}

input PathUpdateWithWhereUniqueWithoutFromInput {
  data: PathUpdateWithoutFromInput!
  where: PathWhereUniqueInput!
}

input PathUpdateWithWhereUniqueWithoutToInput {
  data: PathUpdateWithoutToInput!
  where: PathWhereUniqueInput!
}

input PathUpdateWithWhereUniqueWithoutTripInput {
  data: PathUpdateWithoutTripInput!
  where: PathWhereUniqueInput!
}

input PathUpdateWithoutFromInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  to: WaypointUpdateOneWithoutToInput
  trip: TripUpdateOneWithoutPathsInput
  type: EnumPathTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PathUpdateWithoutToInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  from: WaypointUpdateOneWithoutFromInput
  name: StringFieldUpdateOperationsInput
  trip: TripUpdateOneWithoutPathsInput
  type: EnumPathTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PathUpdateWithoutTripInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  from: WaypointUpdateOneWithoutFromInput
  name: StringFieldUpdateOperationsInput
  to: WaypointUpdateOneWithoutToInput
  type: EnumPathTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PathUpsertWithWhereUniqueWithoutFromInput {
  create: PathCreateWithoutFromInput!
  update: PathUpdateWithoutFromInput!
  where: PathWhereUniqueInput!
}

input PathUpsertWithWhereUniqueWithoutToInput {
  create: PathCreateWithoutToInput!
  update: PathUpdateWithoutToInput!
  where: PathWhereUniqueInput!
}

input PathUpsertWithWhereUniqueWithoutTripInput {
  create: PathCreateWithoutTripInput!
  update: PathUpdateWithoutTripInput!
  where: PathWhereUniqueInput!
}

input PathWhereInput {
  AND: [PathWhereInput!]
  NOT: [PathWhereInput!]
  OR: [PathWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  from: WaypointWhereInput
  fromId: IntNullableFilter
  id: IntFilter
  name: StringFilter
  to: WaypointWhereInput
  toId: IntNullableFilter
  trip: TripWhereInput
  tripId: IntNullableFilter
  type: EnumPathTypeFilter
  updatedAt: DateTimeFilter
}

input PathWhereUniqueInput {
  id: Int
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(after: AccountWhereUniqueInput, before: AccountWhereUniqueInput, first: Int, last: Int, orderBy: [AccountOrderByInput!], where: AccountWhereInput): [Account!]!
  path(where: PathWhereUniqueInput!): Path
  paths(after: PathWhereUniqueInput, before: PathWhereUniqueInput, first: Int, last: Int, orderBy: [PathOrderByInput!], where: PathWhereInput): [Path!]!
  trip(where: TripWhereUniqueInput!): Trip
  trips(after: TripWhereUniqueInput, before: TripWhereUniqueInput, first: Int, last: Int, orderBy: [TripOrderByInput!], where: TripWhereInput): [Trip!]!
  waypoint(where: WaypointWhereUniqueInput!): Waypoint
  waypoints(after: WaypointWhereUniqueInput, before: WaypointWhereUniqueInput, first: Int, last: Int, orderBy: [WaypointOrderByInput!], where: WaypointWhereInput): [Waypoint!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Trip {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: Int
  name: String
  owner: Account
  ownerId: Int
  paths(after: PathWhereUniqueInput, before: PathWhereUniqueInput, first: Int, last: Int, orderBy: [TripPathsOrderByInput!], where: TripPathsWhereInput): [Path!]!
  updatedAt: DateTime
  waypoints(after: WaypointWhereUniqueInput, before: WaypointWhereUniqueInput, first: Int, last: Int, orderBy: [TripWaypointsOrderByInput!], where: TripWaypointsWhereInput): [Waypoint!]!
}

input TripCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  name: String!
  owner: AccountCreateNestedOneWithoutTripsInput
  paths: PathCreateNestedManyWithoutTripInput
  updatedAt: DateTime
  waypoints: WaypointCreateNestedManyWithoutTripInput
}

input TripCreateNestedManyWithoutOwnerInput {
  connect: [TripWhereUniqueInput!]
  connectOrCreate: [TripCreateOrConnectWithoutownerInput!]
  create: [TripCreateWithoutOwnerInput!]
}

input TripCreateNestedOneWithoutPathsInput {
  connect: TripWhereUniqueInput
  connectOrCreate: TripCreateOrConnectWithoutpathsInput
  create: TripCreateWithoutPathsInput
}

input TripCreateNestedOneWithoutWaypointsInput {
  connect: TripWhereUniqueInput
  connectOrCreate: TripCreateOrConnectWithoutwaypointsInput
  create: TripCreateWithoutWaypointsInput
}

input TripCreateOrConnectWithoutownerInput {
  create: TripCreateWithoutOwnerInput!
  where: TripWhereUniqueInput!
}

input TripCreateOrConnectWithoutpathsInput {
  create: TripCreateWithoutPathsInput!
  where: TripWhereUniqueInput!
}

input TripCreateOrConnectWithoutwaypointsInput {
  create: TripCreateWithoutWaypointsInput!
  where: TripWhereUniqueInput!
}

input TripCreateWithoutOwnerInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  name: String!
  paths: PathCreateNestedManyWithoutTripInput
  updatedAt: DateTime
  waypoints: WaypointCreateNestedManyWithoutTripInput
}

input TripCreateWithoutPathsInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  name: String!
  owner: AccountCreateNestedOneWithoutTripsInput
  updatedAt: DateTime
  waypoints: WaypointCreateNestedManyWithoutTripInput
}

input TripCreateWithoutWaypointsInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  name: String!
  owner: AccountCreateNestedOneWithoutTripsInput
  paths: PathCreateNestedManyWithoutTripInput
  updatedAt: DateTime
}

input TripListRelationFilter {
  every: TripWhereInput
  none: TripWhereInput
  some: TripWhereInput
}

input TripOrderByInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  owner: AccountOrderByInput
  ownerId: SortOrder
  updatedAt: SortOrder
}

input TripPathsOrderByInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  updatedAt: SortOrder
}

input TripPathsWhereInput {
  createdAt: DateTimeFilter
  name: StringFilter
}

input TripScalarWhereInput {
  AND: [TripScalarWhereInput!]
  NOT: [TripScalarWhereInput!]
  OR: [TripScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  id: IntFilter
  name: StringFilter
  ownerId: IntNullableFilter
  updatedAt: DateTimeFilter
}

input TripUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: AccountUpdateOneWithoutTripsInput
  paths: PathUpdateManyWithoutTripInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  waypoints: WaypointUpdateManyWithoutTripInput
}

input TripUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TripUpdateManyWithWhereWithoutOwnerInput {
  data: TripUpdateManyMutationInput!
  where: TripScalarWhereInput!
}

input TripUpdateManyWithoutOwnerInput {
  connect: [TripWhereUniqueInput!]
  connectOrCreate: [TripCreateOrConnectWithoutownerInput!]
  create: [TripCreateWithoutOwnerInput!]
  delete: [TripWhereUniqueInput!]
  deleteMany: [TripScalarWhereInput!]
  disconnect: [TripWhereUniqueInput!]
  set: [TripWhereUniqueInput!]
  update: [TripUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [TripUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [TripUpsertWithWhereUniqueWithoutOwnerInput!]
}

input TripUpdateOneWithoutPathsInput {
  connect: TripWhereUniqueInput
  connectOrCreate: TripCreateOrConnectWithoutpathsInput
  create: TripCreateWithoutPathsInput
  delete: Boolean
  disconnect: Boolean
  update: TripUpdateWithoutPathsInput
  upsert: TripUpsertWithoutPathsInput
}

input TripUpdateOneWithoutWaypointsInput {
  connect: TripWhereUniqueInput
  connectOrCreate: TripCreateOrConnectWithoutwaypointsInput
  create: TripCreateWithoutWaypointsInput
  delete: Boolean
  disconnect: Boolean
  update: TripUpdateWithoutWaypointsInput
  upsert: TripUpsertWithoutWaypointsInput
}

input TripUpdateWithWhereUniqueWithoutOwnerInput {
  data: TripUpdateWithoutOwnerInput!
  where: TripWhereUniqueInput!
}

input TripUpdateWithoutOwnerInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  paths: PathUpdateManyWithoutTripInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  waypoints: WaypointUpdateManyWithoutTripInput
}

input TripUpdateWithoutPathsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: AccountUpdateOneWithoutTripsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  waypoints: WaypointUpdateManyWithoutTripInput
}

input TripUpdateWithoutWaypointsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: AccountUpdateOneWithoutTripsInput
  paths: PathUpdateManyWithoutTripInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TripUpsertWithWhereUniqueWithoutOwnerInput {
  create: TripCreateWithoutOwnerInput!
  update: TripUpdateWithoutOwnerInput!
  where: TripWhereUniqueInput!
}

input TripUpsertWithoutPathsInput {
  create: TripCreateWithoutPathsInput!
  update: TripUpdateWithoutPathsInput!
}

input TripUpsertWithoutWaypointsInput {
  create: TripCreateWithoutWaypointsInput!
  update: TripUpdateWithoutWaypointsInput!
}

input TripWaypointsOrderByInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  updatedAt: SortOrder
}

input TripWaypointsWhereInput {
  createdAt: DateTimeFilter
  name: StringFilter
}

input TripWhereInput {
  AND: [TripWhereInput!]
  NOT: [TripWhereInput!]
  OR: [TripWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  id: IntFilter
  name: StringFilter
  owner: AccountWhereInput
  ownerId: IntNullableFilter
  paths: PathListRelationFilter
  updatedAt: DateTimeFilter
  waypoints: WaypointListRelationFilter
}

input TripWhereUniqueInput {
  id: Int
}

type Waypoint {
  altitude: Float
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  from(after: PathWhereUniqueInput, before: PathWhereUniqueInput, first: Int, last: Int): [Path!]!
  id: Int
  latitude: Float
  longitude: Float
  name: String
  to(after: PathWhereUniqueInput, before: PathWhereUniqueInput, first: Int, last: Int): [Path!]!
  trip: Trip
  tripId: Int
  type: WaypointType
  updatedAt: DateTime
}

input WaypointCreateInput {
  altitude: Float
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  from: PathCreateNestedManyWithoutFromInput
  latitude: Float!
  longitude: Float!
  name: String!
  to: PathCreateNestedManyWithoutToInput
  trip: TripCreateNestedOneWithoutWaypointsInput
  type: WaypointType
  updatedAt: DateTime
}

input WaypointCreateNestedManyWithoutTripInput {
  connect: [WaypointWhereUniqueInput!]
  connectOrCreate: [WaypointCreateOrConnectWithouttripInput!]
  create: [WaypointCreateWithoutTripInput!]
}

input WaypointCreateNestedOneWithoutFromInput {
  connect: WaypointWhereUniqueInput
  connectOrCreate: WaypointCreateOrConnectWithoutfromInput
  create: WaypointCreateWithoutFromInput
}

input WaypointCreateNestedOneWithoutToInput {
  connect: WaypointWhereUniqueInput
  connectOrCreate: WaypointCreateOrConnectWithouttoInput
  create: WaypointCreateWithoutToInput
}

input WaypointCreateOrConnectWithoutfromInput {
  create: WaypointCreateWithoutFromInput!
  where: WaypointWhereUniqueInput!
}

input WaypointCreateOrConnectWithouttoInput {
  create: WaypointCreateWithoutToInput!
  where: WaypointWhereUniqueInput!
}

input WaypointCreateOrConnectWithouttripInput {
  create: WaypointCreateWithoutTripInput!
  where: WaypointWhereUniqueInput!
}

input WaypointCreateWithoutFromInput {
  altitude: Float
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  latitude: Float!
  longitude: Float!
  name: String!
  to: PathCreateNestedManyWithoutToInput
  trip: TripCreateNestedOneWithoutWaypointsInput
  type: WaypointType
  updatedAt: DateTime
}

input WaypointCreateWithoutToInput {
  altitude: Float
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  from: PathCreateNestedManyWithoutFromInput
  latitude: Float!
  longitude: Float!
  name: String!
  trip: TripCreateNestedOneWithoutWaypointsInput
  type: WaypointType
  updatedAt: DateTime
}

input WaypointCreateWithoutTripInput {
  altitude: Float
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  from: PathCreateNestedManyWithoutFromInput
  latitude: Float!
  longitude: Float!
  name: String!
  to: PathCreateNestedManyWithoutToInput
  type: WaypointType
  updatedAt: DateTime
}

input WaypointListRelationFilter {
  every: WaypointWhereInput
  none: WaypointWhereInput
  some: WaypointWhereInput
}

input WaypointOrderByInput {
  altitude: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  name: SortOrder
  trip: TripOrderByInput
  tripId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input WaypointScalarWhereInput {
  AND: [WaypointScalarWhereInput!]
  NOT: [WaypointScalarWhereInput!]
  OR: [WaypointScalarWhereInput!]
  altitude: FloatNullableFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  id: IntFilter
  latitude: FloatFilter
  longitude: FloatFilter
  name: StringFilter
  tripId: IntNullableFilter
  type: EnumWaypointTypeFilter
  updatedAt: DateTimeFilter
}

enum WaypointType {
  HOTEL
  POI
  SIGHTSEEING
  TRANSPORT
}

input WaypointUpdateInput {
  altitude: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  from: PathUpdateManyWithoutFromInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  to: PathUpdateManyWithoutToInput
  trip: TripUpdateOneWithoutWaypointsInput
  type: EnumWaypointTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WaypointUpdateManyMutationInput {
  altitude: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumWaypointTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WaypointUpdateManyWithWhereWithoutTripInput {
  data: WaypointUpdateManyMutationInput!
  where: WaypointScalarWhereInput!
}

input WaypointUpdateManyWithoutTripInput {
  connect: [WaypointWhereUniqueInput!]
  connectOrCreate: [WaypointCreateOrConnectWithouttripInput!]
  create: [WaypointCreateWithoutTripInput!]
  delete: [WaypointWhereUniqueInput!]
  deleteMany: [WaypointScalarWhereInput!]
  disconnect: [WaypointWhereUniqueInput!]
  set: [WaypointWhereUniqueInput!]
  update: [WaypointUpdateWithWhereUniqueWithoutTripInput!]
  updateMany: [WaypointUpdateManyWithWhereWithoutTripInput!]
  upsert: [WaypointUpsertWithWhereUniqueWithoutTripInput!]
}

input WaypointUpdateOneWithoutFromInput {
  connect: WaypointWhereUniqueInput
  connectOrCreate: WaypointCreateOrConnectWithoutfromInput
  create: WaypointCreateWithoutFromInput
  delete: Boolean
  disconnect: Boolean
  update: WaypointUpdateWithoutFromInput
  upsert: WaypointUpsertWithoutFromInput
}

input WaypointUpdateOneWithoutToInput {
  connect: WaypointWhereUniqueInput
  connectOrCreate: WaypointCreateOrConnectWithouttoInput
  create: WaypointCreateWithoutToInput
  delete: Boolean
  disconnect: Boolean
  update: WaypointUpdateWithoutToInput
  upsert: WaypointUpsertWithoutToInput
}

input WaypointUpdateWithWhereUniqueWithoutTripInput {
  data: WaypointUpdateWithoutTripInput!
  where: WaypointWhereUniqueInput!
}

input WaypointUpdateWithoutFromInput {
  altitude: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  to: PathUpdateManyWithoutToInput
  trip: TripUpdateOneWithoutWaypointsInput
  type: EnumWaypointTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WaypointUpdateWithoutToInput {
  altitude: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  from: PathUpdateManyWithoutFromInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  trip: TripUpdateOneWithoutWaypointsInput
  type: EnumWaypointTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WaypointUpdateWithoutTripInput {
  altitude: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  from: PathUpdateManyWithoutFromInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  to: PathUpdateManyWithoutToInput
  type: EnumWaypointTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WaypointUpsertWithWhereUniqueWithoutTripInput {
  create: WaypointCreateWithoutTripInput!
  update: WaypointUpdateWithoutTripInput!
  where: WaypointWhereUniqueInput!
}

input WaypointUpsertWithoutFromInput {
  create: WaypointCreateWithoutFromInput!
  update: WaypointUpdateWithoutFromInput!
}

input WaypointUpsertWithoutToInput {
  create: WaypointCreateWithoutToInput!
  update: WaypointUpdateWithoutToInput!
}

input WaypointWhereInput {
  AND: [WaypointWhereInput!]
  NOT: [WaypointWhereInput!]
  OR: [WaypointWhereInput!]
  altitude: FloatNullableFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  from: PathListRelationFilter
  id: IntFilter
  latitude: FloatFilter
  longitude: FloatFilter
  name: StringFilter
  to: PathListRelationFilter
  trip: TripWhereInput
  tripId: IntNullableFilter
  type: EnumWaypointTypeFilter
  updatedAt: DateTimeFilter
}

input WaypointWhereUniqueInput {
  id: Int
}
